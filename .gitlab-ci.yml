stages:
  - build-jar

build-deps:
  stage: build-jar
  tags:
    #gitlab runs on a shared runner without this and you lose network access
    - lightweight
    - gpg-signing
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    #gitlab clones the repo into the same directory that you're in
    #check buildtool dependencies exist
    - which autoconf
    - which automake 
    - which libtool 
    - which curl 
    - which wget 
    - which make 
    - which g++ 
    - which unzip

    # sanity check if required files exist
    - gpg --list-secret-keys Ocient
    - test -f /home/gitlab-runner/codesignstore.jks
    - test -f ${DEPLOY_SETTINGS_XML}

    #set versions
    - JDK_VERSION=13.0.1
    - MVN_VERSION=3.3.9

    # download a jdk
    - wget -nv http://i01-fil-001/xgsrc/toolchain/jdk-${JDK_VERSION}_linux-x64_bin.tar.gz
    - tar xzf jdk-${JDK_VERSION}_linux-x64_bin.tar.gz
    - rm jdk-${JDK_VERSION}_linux-x64_bin.tar.gz
    - export JAVA_HOME="$(pwd)/jdk-${JDK_VERSION}"
    - export PATH=$PATH:"${JAVA_HOME}/bin"
    # download maven
    - wget -nv https://archive.apache.org/dist/maven/maven-3/${MVN_VERSION}/binaries/apache-maven-${MVN_VERSION}-bin.tar.gz
    - tar xzf apache-maven-${MVN_VERSION}-bin.tar.gz
    - rm apache-maven-${MVN_VERSION}-bin.tar.gz
    - export PATH=$PATH:"$(pwd)/apache-maven-${MVN_VERSION}/bin"

    - javac -version
    - mvn --version

    # create a settings.xml file that moves the local maven repo, probably dont want that at user home of gitlab CI runner
    - echo '<?xml version="1.0" encoding="UTF-8"?><settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">' > mavenGlobalSettings.xml
    - echo '<localRepository>'$(pwd)'/.m2/repository</localRepository></settings>' >> mavenGlobalSettings.xml

    - mvn verify -gs mavenGlobalSettings.xml -s ${DEPLOY_SETTINGS_XML} -Djarsigner.storepass=$(cat /home/gitlab-runner/codesignstore.pwd)
    
    #it is unbelievably difficult to read the version from a pom file
    - JDBC_VERSION=$(mvn -gs mavenGlobalSettings.xml help:evaluate -Dexpression=project.version -q -DforceStdout | tail -n 1)
    - echo $JDBC_VERSION
    - JAR_FILE=target/ocient-jdbc4-${JDBC_VERSION}-jar-with-dependencies.jar
    # debug
    #- JAR_DIR=v${JDBC_VERSION}-TEST-DEPLOY
    - JAR_DIR=v${JDBC_VERSION}
    - mkdir $JAR_DIR
    - cp $JAR_FILE $JAR_DIR
    - sudo chmod -R 777 $JAR_DIR
    - sudo cp -r $JAR_DIR /mnt/ocarchive1/www/ocientrepo/java/jdbc/

    #Separate this from verify in case deploy fails for some reason
    - mvn deploy -gs mavenGlobalSettings.xml -s ${DEPLOY_SETTINGS_XML} -Djarsigner.storepass=$(cat /home/gitlab-runner/codesignstore.pwd)

    - rm -rf $JAR_DIR
    - rm -rf target
    - rm -rf jdk-${JDK_VERSION}
    - rm -rf apache-maven-${MVN_VERSION}
    - rm -rf .m2
    - rm mavenGlobalSettings.xml

build-docs:
  stage: build-jar
  timeout: 1 hour
  interruptible: true
  script:
    # Some scripting logic
    - echo "HELLO TEST"

# stage-docs:
#   stage: stage-docs
#   needs: ["build-docs"]
#   dependencies: ["build-docs"]
#   timeout: 2 hours
#   resource_group: installer_docs_repo
#   tags:
#     - lightweight
#   variables:
#     IMAGE_NAME: $RELEASE_IMAGE_NAME
#   script:
#     # Download artifacts using the image name known to be used by this pipeline
#     - mkdir -p ${CI_PROJECT_DIR}/artifacts
#     - rclone copy dev_cos:docker/$IMAGE_NAME/$CI_PIPELINE_ID $CI_PIPELINE_ID
#     - cd $CI_PIPELINE_ID && { setfacl --restore=permissions.facl || true; } &> ${CI_PROJECT_DIR}/artifacts/setfacl_restore.txt && cd -
#     # Determine the tree name according to https://ocient.atlassian.net/wiki/spaces/PLAT/pages/1666777462/RPM+Naming+Conventions
#     - |
#       VERSION=$(cat $(pwd)/version)
#       [ -n "$VERSION" ] && echo "Determined VERSION to be $VERSION" || { echo "Could not determine version!"; exit 1; }
#     - |
#       DATE_TIME=$(docker run --rm -v $(pwd)/$CI_PIPELINE_ID:/$CI_PIPELINE_ID centos:8 /bin/bash -c "/$CI_PIPELINE_ID/rolehostd --build-info" | grep "^Version =" | awk '{print $3}' | rev | cut -c 1-13 | rev)
#       [ -n "$DATE_TIME" ] && echo "Determined DATE_TIME to be $DATE_TIME" || { echo "Could not determine date time from $RELEASE_IMAGE_NAME!"; exit 1; }
#     - |
#       if [ "${CI_COMMIT_BRANCH:0:7}" = "release" ]
#       then
#         TREE_NAME="ocient_${VERSION}_${DATE_TIME}"
#       else
#         TREE_NAME="ocient_${VERSION}_${FEATURE_NAME}_${DATE_TIME}"
#       fi
#     # Copy artifacts to their respective trees
#     - echo "Copying docs to $DOCS_REPO_PATH/$TREE_NAME ..."
#     - rsync -Larvh --delete $ARCHIVE_PATH/$CI_PIPELINE_ID/docs/* $DOCS_REPO_PATH/$TREE_NAME
#     # Handle symlinks if necessary
#     - |
#       if [ "${CI_COMMIT_BRANCH:0:7}" = "release" ]
#       then
#         echo "Not updating symlinks for release branches - defer to manual process ..."
#       else
#         LATEST_TREE_NAME="ocient_${FEATURE_NAME}"
#         for REPO_PATH in "$DOCS_REPO_PATH"
#         do
#           echo "Updating $REPO_PATH/$LATEST_TREE_NAME to point to $TREE_NAME ..."
#           ln -snf $TREE_NAME $REPO_PATH/$LATEST_TREE_NAME
#           sudo chmod 0777 $REPO_PATH/$LATEST_TREE_NAME || echo "Error changing permissions on $REPO_PATH/$LATEST_TREE_NAME"
#         done
#       fi    